// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/URhD/Kta2j4YLhb7cI21V0UoFUfWpQafNeS4x9T/We4goskTu0oIEJWrVh0pV",
	"qaD9AE7IgUk48xVmv1E1uw53ju0kdw1/UuXN9npndmZ+v5nZWWPd0I/CAAIZs/YaE3CrD7G8HDou6A/X",
	"uOyuXOZBAOL6m7VVWumGgYRA0iOPIs/tcumGQetmHAb0Le6ugM/pKRJhBEIWAqe3OY5Le7h3beoXKfpg",
	"MwfirnAjWmZthk8wxx0cqbv4HDN8hTmOLNzCFMc41p9TZjO4w/3IA9Zma4tMutKDRda2Flkc+tAp3m1r",
	"kUm4I6dX9Cst9IU39V2/JcxmQd/z+BIJNmeTqxEpCZduQleyxGY94LIvoOM6ZNaBo/9OB8exGmCmNjDD",
	"XUzVAHN116JXdQ+zZhVuIGEZBOlw4w7vSvc21Kj4B/cwxWcWprhLenAbx5irdXquuqlB11IYesAD0iX5",
	"csd14lmMUQ8sNVA/4zPMcZvZzJXgawFVSxr0cyH4KkuSin/pE+HSFeCYPYnNroWxfC+w7PG+JwlihIwP",
	"CaVvAZVvE4XvGnVzoCyxC7hokV8IEYrrEEdhEEMVQEDLU6pjKdxguU5TGbxN8pb0+szBW8ccX+BO4eyc",
	"PNPo+zfeqfeGG/RCbRBh0sCbBGxjptbLMo3zb4OIzQEvnF84v0CGhhEEPHJZm13Un2wWcbmi7WsZA+lx",
	"GTTvyHpN1isOa7MvoXCR3iS4DxJEzNrfV7zxFHPcJX8Q8nbwFWY41ma6tLwC3NFCAu6TFTL8AQJmTyWC",
	"CSG547tBZ/+PSiDXjMRbfRCrE4FTNJuWehJ8a1JpmDKnugGO8FkDDOrVea7vysO0/aGzXaYGMwgNe70Y",
	"DpX6WG2oDbWOo3q5N4ivhj0aUJ8sLMyU/9/kipPg3ZEUs09j41NJXF0BXILT4bLGO79pb6TlHJSpzep5",
	"e6HwSQRzuIRz0vWhSrez+nVY/bJZP3KODgXmuKXLwDbu0QnmD0ddGTtQUpOD4L36Nf11aeFCzQn/whz3",
	"1EN8oQ+X6qy0px5adCyKwLZxEGb7f+DYCLs4szCizYiyiIU7Jp5qiK8xJXmfzpg0PhbQY232UWtybWoV",
	"PUKr3CDU+AN/xbEaqoG6q2MxVpsUjVzdxwy3CBSWznZUYk1odAfS930uVidmDtU9E0qybVvv+LFSjq2u",
	"5gF5QetL1U+0AV9a+BrzfY6Qc1r0F2ZFXVBD8koUxjUVedK1fDAl+YY9dWNdbQpQ6VLbqr85JJVqcuHE",
	"gFHT7tWg4zOTWw3K3yUq/8QR7upsRLik1DdWDwgbRRdJL2dEPkkiP5kukGSZSdG13TptLXrl1prrJMZr",
	"HkioMvRz/d1A7YpTZalmH3XgE+7pNrJ875mrrTzGHeP9ZokSty/V2PbLxABLDdU6vsaRuk+hsdRQB0uX",
	"0Hn4Oe9N8f9K1ktHBgB3cE9t7jdHaSFzjCm+NBA8dZz/ewIhw/kSYUxZxqyxUTR1mcvuSk1hnsxoz1j/",
	"33qD+ml3Un/VrO92z0r3yWeDU8/+xwfvYTgy9+Ty3b6p/vdjEJ2jB2bfxSCaOvRD50jHTgVPKR/rZFUT",
	"7M0Zxj+lqdkJZKI5pmj9GDoej2VHwG1XTy7LmotJf497cXUuM7mLpWpAMNdDAzWkHK8earA8ItiP1Ybm",
	"0CtzBVOPakYHhyfJZl/PnDA1jI7fJc3Gr+MPtb769uo35zCnyOEWgRyfN5TFdzfbqqF8KQM1ReEs5b/V",
	"BvD0Z/6aoc2Bzq+wtBFhSZL8GwAA//+/Y+Gfpx8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
